# CI Pipeline for Spin-Glass-Anneal-RL
# Copy this file to .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  # =============================================================================
  # Code Quality and Linting
  # =============================================================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Ruff (linting)
        run: ruff check --output-format=github .

      - name: Run Ruff (formatting)
        run: ruff format --check .

      - name: Run Black (formatting check)
        run: black --check --diff .

      - name: Run isort (import sorting)
        run: isort --check-only --diff .

      - name: Run mypy (type checking)
        run: mypy spin_glass_rl/

      - name: Run bandit (security)
        run: bandit -r spin_glass_rl/ -f json -o bandit-report.json

      - name: Upload bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # =============================================================================
  # Unit Tests
  # =============================================================================
  test-unit:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for resource optimization
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.9"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v \
            --cov=spin_glass_rl \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=pytest-results.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_DEFAULT_VERSION
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: pytest-results.xml

  # =============================================================================
  # GPU Tests
  # =============================================================================
  test-gpu:
    name: GPU Tests
    runs-on: [self-hosted, gpu, linux]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'gpu-tests')
    container:
      image: nvidia/cuda:12.2-devel-ubuntu22.04
      options: --gpus all

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python and dependencies
        run: |
          apt-get update
          apt-get install -y python3.11 python3.11-dev python3-pip git
          ln -sf /usr/bin/python3.11 /usr/bin/python
          python -m pip install --upgrade pip
          pip install -e ".[dev,cuda]"

      - name: Check GPU availability
        run: |
          nvidia-smi
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"

      - name: Run GPU tests
        run: |
          pytest tests/ -v -m "gpu or cuda" \
            --cov=spin_glass_rl \
            --cov-report=xml \
            --junitxml=gpu-test-results.xml

      - name: Upload GPU test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gpu-test-results
          path: gpu-test-results.xml

  # =============================================================================
  # Integration Tests
  # =============================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/ -v \
            --cov=spin_glass_rl \
            --cov-report=xml \
            --junitxml=integration-test-results.xml

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-test-results.xml

  # =============================================================================
  # End-to-End Tests
  # =============================================================================
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ -v \
            --cov=spin_glass_rl \
            --cov-report=xml \
            --junitxml=e2e-test-results.xml

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: e2e-test-results.xml

  # =============================================================================
  # Docker Build
  # =============================================================================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          push: false
          tags: spin-glass-rl:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: spin-glass-rl:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker images
        run: |
          # Test development image
          docker run --rm spin-glass-rl:dev python -c "import spin_glass_rl; print('Dev image OK')"
          
          # Test production image
          docker run --rm spin-glass-rl:prod python -c "import spin_glass_rl; print('Prod image OK')"

  # =============================================================================
  # Documentation Build
  # =============================================================================
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # =============================================================================
  # Performance Benchmarks
  # =============================================================================
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run benchmarks
        run: |
          pytest tests/ -m benchmark \
            --benchmark-only \
            --benchmark-json=benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

      - name: Comment PR with benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const benchmarkResults = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));
            
            const comment = `## 📊 Benchmark Results
            
            | Metric | Value |
            |--------|-------|
            | Mean Duration | ${benchmarkResults.benchmarks[0].stats.mean}s |
            | Min Duration | ${benchmarkResults.benchmarks[0].stats.min}s |
            | Max Duration | ${benchmarkResults.benchmarks[0].stats.max}s |
            
            <details>
            <summary>Full Results</summary>
            
            \`\`\`json
            ${JSON.stringify(benchmarkResults, null, 2)}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # =============================================================================
  # Aggregate Results
  # =============================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - test-unit
      - test-integration
      - test-e2e
      - docker-build
      - docs-build
    if: always()
    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.test-unit.result }}" != "success" ]] || \
             [[ "${{ needs.test-integration.result }}" != "success" ]] || \
             [[ "${{ needs.test-e2e.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build.result }}" != "success" ]] || \
             [[ "${{ needs.docs-build.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"

      - name: Send notification
        if: failure() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow